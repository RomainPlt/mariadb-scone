#!/bin/bash

path_to_app=/home/romain/iexecdev/iexec-secret-vault
path=$(pwd)
name_app=secret-vault
dockerfile=Dockerfile-trusted
image_name=romainplt/secret-vault
password=password
secret=toto
key=tata
scone_heap=2G
passive=no
build_arg=build/libs/*.jar


remove_docker_containers()
{	

	echo "Here are your current containers : "
	yesorno=yes
	while [ $yesorno = yes ]; do
		docker ps -a --format "table {{.Image}}\t{{.Names}}\t{{.Status}}"
		echo " "
		echo "Do you want to stop/rm one or several ? (y/n)"
		read answer

		if [ $answer = y ] || [ $answer = yes ] || [ $answer = Y ]; then
			yesorno=yes
			echo "write 'all' if you want to remove them all. Or write one name."
			read container
			
			if [ $container = all ]; then
				echo "Removing all containers ..."
				docker stop $(docker ps -a -q)
		                docker rm $(docker ps -a -q)
		                yesorno=no
			else
				echo "removing container $container"
				docker stop $container 
				docker rm $container
				echo " "
			fi
		else 
			yesorno=no
		fi
	done	
}

build()
{ 
	echo " "
	if [ $(docker ps -qa -f name=secret-vault) ]; then
		docker stop secret-vault						
		docker rm secret-vault
	fi
	cd $path_to_app
	./gradlew build
	cd $path_to_app
	rm dockerlogs.txt
	docker build --file $dockerfile --no-cache --build-arg JAR_FILE=$build_arg -t $image_name . >> dockerlogs.txt	
}




start_cas_las_scone-cli()
{

	cd $path
	docker volume rm secret-vault
	docker volume create secret-vault
	docker volume rm maria-db
	docker volume create maria-db
	docker network rm local-network
	docker network create local-network
	export volume=$path
	echo $path
	compose="docker-compose.yml"
	if [ -f "$compose" ]; then
	        rm docker-compose.yml
	fi
	cp docker-compose.yml.template docker-compose.yml
	sed -i "s+%VOLUME%+$path+" docker-compose.yml
	sed -i "s+%IMAGE%+$image_name+" docker-compose.yml
	sed -i "s/%SCONE_HEAP%/$scone_heap/" docker-compose.yml
	sed -i "s/%PASSWORD%/$password/" docker-compose.yml
	
	echo "starting cas las scone cli"
	docker-compose up -d las cas scone
	sleep 5
	mr_enclave=$(docker exec -it cas sh -c "SCONE_HASH=1 /usr/local/bin/cas")
	echo "mr enclave 1 : $mr_enclave"
	mr_enclave2=${mr_enclave%?}
	echo "mr enclave 2 : $mr_enclave2"

	trust=$(docker exec -it scone  sh -c "scone cas attest -G --only_for_testing-debug cas $mr_enclave2")
	echo $trust
	
}

get_mr_enclave()
{
	cd $path_to_app
	mr_enclave=$(grep -i -A 2 'RUN SCONE_MODE=SIM SCONE_HEAP=2G SCONE_LOG=7 SCONE_HASH=1 SCONE_ALPINE=1 /usr/bin/java' dockerlogs.txt | sed -n 3p)
	
	cd $path
	docker run --name mariadb --network local-network --device /dev/isgx -e MYSQL_ROOT_PASSWORD=$password -d registry.scontain.com:5050/sconecuratedimages/apps:mariadb-alpine-scone3.0
	mr_enclave_maria=$(docker exec -it mariadb sh -c "SCONE_VERSION=1 SCONE_HEAP=2G SCONE_HASH=1 mysqld")
	echo "maria mr enclave : $mr_enclave_maria"
	mr_enclave_maria=${mr_enclave_maria%?}
	docker stop mariadb
	docker rm mariadb
	#mr_enclave_maria=195f8cc943a26695707d2cd96463999d1fe3d3644ce957676b26795d8eeffd55
	
}

get_fspf_key_tag()
{
	cd $path_to_app
	fspf_tag1=$(grep '<FSPF_TAG>' dockerlogs.txt)
	fspf_tag1=${fspf_tag1%<*}
	fspf_tag=$(echo $fspf_tag1 | sed 's/.*>//')
	echo "fspf tag : " $fspf_tag
	
	fspf_key1=$(grep '<FSPF_KEY>' dockerlogs.txt)
	fspf_key1=${fspf_key1%<*}

	fspf_key=$(echo $fspf_key1 | sed 's/.*>//')
	echo "fspf key : " $fspf_key
}




create_session_secret_vault()
{
	cd $path/secretvault
	sessionfile="session.yml"
	if [ -f "$sessionfile" ]; then
	        rm session.yml
	fi
	cp secret-vault-session.yml.template session.yml
	sed -i "s/%MR_ENCLAVE%/$mr_enclave/" session.yml
	sed -i "s/%FSPF_KEY%/$fspf_key/" session.yml
	sed -i "s/%FSPF_TAG%/$fspf_tag/" session.yml
	sed -i "s/%SECRET%/$secret/" session.yml
	sed -i "s/%KEY%/$key/" session.yml

}



creating_mariadb_session()

{
	cd $path/maria
	sessionfile="session.yml"
	if [ -f "$sessionfile" ]; then
	        rm session.yml
	fi
	cp mariadb-session.yml.template session.yml

	sed -i "s/%MR_ENCLAVE%/$mr_enclave_maria/" session.yml
	sed -i "s/%SECRET%/$secret/" session.yml
	sed -i "s/%KEY%/$key/" session.yml
	sed -i "s/%PASSWORD%/$password/" session.yml
	
	
	rm sessionIdDB.txt
	docker exec -it scone sh -c "cd home && cd maria && curl -k -s --cert conf/client.crt --key conf/client-key.key --data-binary @session.yml -X POST https://cas:8081/session" >> sessionIdDB.txt
	session_idDB=$(cat sessionIdDB.txt | grep hash)
	session_idDB=${session_idDB%*??}
	session_idDB=${session_idDB:11}
	rm sessionIdDB.txt 
	echo $session_idDB >> sessionIdDB.txt
	rm sessionDB.txt
	docker exec -it scone sh -c "cd home/maria && curl -k -s --cert conf/client.crt --key conf/client-key.key https://cas:8081/session/maria-db-session" >> sessionDB.txt
}

push_session_to_cas()
{
	cd $path/secretvault
	rm sessionId.txt
	docker exec -it scone sh -c "cd home && cd secretvault && curl -k -s --cert conf/client.crt --key conf/client-key.key --data-binary @session.yml -X POST https://cas:8081/session" >> sessionId.txt
	session_id=$(cat sessionId.txt | grep hash)
	session_id=${session_id%*??}
	session_id=${session_id:11}
	rm sessionId.txt 
	echo $session_id >> sessionId.txt
	rm session.txt
	docker exec -it scone sh -c "cd home/secretvault && curl -k -s --cert conf/client.crt --key conf/client-key.key https://cas:8081/session/session_secret-vault" >> session.txt
}









remove_docker_containers

build

start_cas_las_scone-cli

get_mr_enclave
get_fspf_key_tag

create_session_secret_vault
push_session_to_cas
creating_mariadb_session

cd $path
docker-compose up -d secret-vault
cd $path
docker-compose up maria-db








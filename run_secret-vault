#!/bin/bash



####################################################################### VARIABLES


path_to_app=~/iexecdev/iexec-secret-vault
path=$(pwd)
name_app=secret-vault
dockerfile=Dockerfile-trusted
image_name=romainplt/secret-vault
secret=
key=
scone_heap=2G
build_arg=build/libs/*.jar

####################################################################### FUNCTIONS

usage()
{
	echo "  
	
	Run you app in a local CAS.
	
		./run_secret-vault [-tag] 
		
		./run_secret-vault -s mySecret -k myKey -i example/image -d my-dockerfile -b /path/to/*.jar -n my-app -p /path/to/app --scone-heap 2G 
		 
		
		-b --build-arg 	Path to jar file for docker.
					Default : build/libs/*.jar 
		-d --dockerfile     	Name of the file your docker build points to. 
					Default : Dockerfile-trusted
		-i --image-name     	App's image name for building in docker. 
					Default : romainplt/secret-vault 
		-k --key		Key to inject in session
		-n --name           	Your app's name need to be the one you use to run docker-compose. 		
					Default : secret-vault 
		-p --path-to-app    	Absolute path. You need to have a docker-compose in the folder you point. 	
					Default : ~/iexecdev/iexec-secret-vault-deploy
		-s --secret		Secret to inject in session
		
		
		--scone-heap     	Change SCONE_HEAP. xG giga / xM mega / xK kilo / x octets. 			
					Default : 2G
		"
}	

remove_docker_containers()
{
	echo "Here are your current containers : "
	yesorno=yes
	while [ $yesorno = yes ]; do
		docker ps -a --format "table {{.Image}}\t{{.Names}}\t{{.Status}}"
		echo " "
		echo "Do you want to stop/rm one or several ? (y/n)"
		read answer

		if [ $answer = y ] || [ $answer = yes ] || [ $answer = Y ]; then
			yesorno=yes
			echo "write 'all' if you want to remove them all. Or write one name."
			read container
			
			if [ $container = all ]; then
				echo "Removing all containers ..."
				docker stop $(docker ps -a -q)
		                docker rm $(docker ps -a -q)
		                yesorno=no
			else
				echo "removing container $container"
				docker stop $container 
				docker rm $container
				echo " "
			fi
		else 
			yesorno=no
		fi
	done
		
}

build()
{ 
	echo " "
	if [ $(docker ps -qa -f name=secret-vault) ]; then
		docker stop secret-vault						
		docker rm secret-vault
	fi
	echo "BUILDING IMAGE"
	cd $path_to_app
	./gradlew build
	cd $path_to_app
	rm dockerlogs.txt
	docker build --file $dockerfile --no-cache --build-arg JAR_FILE=$build_arg -t $image_name . >> dockerlogs.txt	
}

get_mr_enclave()
{
	cd $path_to_app
	echo " "
	echo "GET MR_ENCLAVE TAGS AND KEY"
	echo " "
	mr_enclave=$(grep -i -A 2 'RUN SCONE_MODE=SIM SCONE_HEAP=2G SCONE_LOG=7 SCONE_HASH=1 SCONE_ALPINE=1 /usr/bin/java' dockerlogs.txt | sed -n 3p)
	echo "MrEnclave is : $mr_enclave"	
}

get_fspf_key_tag()
{
	cd $path_to_app
	fspf_tag1=$(grep '<FSPF_TAG>' dockerlogs.txt)
	fspf_tag1=${fspf_tag1%<*}
	echo "fspf tag is :"
	fspf_tag=$(echo $fspf_tag1 | sed 's/.*>//')
	echo $fspf_tag
	fspf_key1=$(grep '<FSPF_KEY>' dockerlogs.txt)
	fspf_key1=${fspf_key1%<*}
	echo "fspf key is :"
	fspf_key=$(echo $fspf_key1 | sed 's/.*>//')
	echo $fspf_key	
}

create_session()
{
	cd $path
	echo " "
	echo "SESSION"
	echo " "
	sessionfile="session.yml"
	if [ -f "$sessionfile" ]; then
	        rm session.yml
	fi
	touch session.yml
	echo "
name: session_secret-vault
services:
  - name: secret-vault
    image_name: secret-vault-image
    mrenclaves: [$mr_enclave]
    pwd: /
    fspf_path: /fspf.pb
    fspf_key: $fspf_key
    fspf_tag: $fspf_tag
    command: 'java -jar /app.jar'
    environment:
      CLASSPATH: '/'
      SCONE_MODE: hw
      JAVA_TOOL_OPTIONS: '-Xmx256m'
      LD_LIBRARY_PATH: '/usr/lib/jvm/java-11-openjdk/lib/server:/usr/lib/jvm/java-11-openjdk/lib:/usr/lib/jvm/java-11-openjdk/../lib'
      SECRET: $secret
      KEY: $key
      
images:
  - name: secret-vault-image
    mrenclaves: [$mr_enclave]
    volumes:
      - name: database
        path: /tmp/secret-vault/data
        
volumes:
  - name: database" >> session.yml				

	cat session.yml
}


start_cas_las_scone-cli()
{
	echo " "
	echo "STARTING CAS LAS AND SCONE-CLI"
	echo " "
	docker network create local-network
	cd $path/cas_las_scone
	export VOLUME=$path
	docker-compose up -d
	mr_enclave=$(docker exec -it cas sh -c "SCONE_HASH=1 /usr/local/bin/cas")
	echo "CAS's MrEnclave is : "
	echo $mr_enclave
	echo " "
	echo "wait for LAS to be up ..."
	mr_enclave2=${mr_enclave%?}
	sleep 2
	echo "Attesting CAS ..."
	trust=$(docker exec -it scone  sh -c "scone cas attest -G --only_for_testing-debug cas $mr_enclave2")
}

push_session_to_cas()
{
	cd $path
	echo " "
	echo "PUSHING SESSION TO CAS"
	echo " "
	docker exec -it scone sh -c "cd home && curl -k -s --cert conf/client.crt --key conf/client-key.key --data-binary @session.yml -X POST https://cas:8081/session" >> sessionId.txt
	session_id=$(cat sessionId.txt | grep hash)
	session_id=${session_id%*??}
	session_id=${session_id:11}
	echo "Session's id is : $session_id"
	rm sessionId.txt 
	echo $session_id >> sessionId.txt
	rm session.txt
	echo "Pushing session info in session.txt"
	docker exec -it scone sh -c "cd home && curl -k -s --cert conf/client.crt --key conf/client-key.key https://cas:8081/session/session_secret-vault" >> session.txt
}





up_secret-vault()
{
	echo " "
	echo "RUNNING SECRET-VAULT"
	echo " "
	cd $path
	echo "creating docker volume ..."
	docker volume create --driver local --opt type=non --opt device=$path_to_app --opt o=bind secret-vault
	echo " "

	echo "creating docker compose ..."
	
	rm docker-compose.yml
	
	touch docker-compose.yml
	echo "
version: '3.4'
services: 
  secret-vault: 
    image: $image_name
    container_name: secret-vault
    ports:
      - 8080:8080
    devices: 
      - /dev/isgx
    volumes:
      - $path_to_app/data:/tmp/secret-vault/data:rw
    environment:
      - SCONE_LAS_ADDR=las
      - SCONE_CONFIG_ID=session_secret-vault/secret-vault      
      - SCONE_LOG=7
      - SCONE_MODE=hw
      - SCONE_HEAP=$scone_heap
      - SCONE_CAS_ADDR=cas
      - SCONE_ALPINE=1
      - SCONE_FORK=1
      - SCONE_SESSION_ID=session_secret-vault
    networks:
      - local-network
     
volumes:
  secret-vault:
    external: true

networks:
  local-network:
    external: true">>docker-compose.yml
      
      echo " "
      echo "Running $name_app"
      docker-compose up secret-vault
}


####################################################################### SCRIPTS


if [ "$1" == "" ]; then
	usage
	exit
fi

while [ "$1" != "" ]; do
	case $1 in
		--scone-heap )
			shift
			scone_heap=$1
			;;
		-s | --secret )
			shift
			secret=$1
			;;
		-k | --key )
			shift
			key=$1
			;;
		-p | --path-to-app )
			shift
			path_to_app=$1
			;;
		-n | --name )
			shift
			name_app=$1
			;;
		-d | --dockerfile )
			shift 
			dockerfile=$1
			;;
		-i | --image_name )
			shift
			image_name=$1
			;;
		-b | --build-arg ) 
			shift
			build_arg=$1
			;;
		-h | --help )
			usage
			exit
			;;
		* ) 	usage
			exit
			;;
			
	esac
	shift
done


remove_docker_containers
build
get_mr_enclave
get_fspf_key_tag
create_session
start_cas_las_scone-cli 	
push_session_to_cas
up_secret-vault












